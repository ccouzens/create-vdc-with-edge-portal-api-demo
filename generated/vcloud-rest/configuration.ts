// tslint:disable
/**
 * vCloud Director
 * # vCloud Director Rest API 32.0  ## Suitability for an OpenAPI specification  OpenAPI works with HTTP APIs where the paths of the endpoints follow a predictable pattern.  The vCloud Director Rest API makes extensive use of links. Each link has a URL inside it. By following the correct series of links, a client can arrive at the endpoint it is interested in. This hyperlink style of API is incompatible with OpenAPI.  As well as using hyperlinks, the API does use predictable paths. I read the documentation as being contradictory to if this predictability should be relied upon.  The vCloud Director Rest API documentation [suggests](https://pubs.vmware.com/vcd-56/index.jsp?topic=%2Fcom.vmware.vcloud.api.doc_56%2FGUID-E51FECF4-79D4-497F-A31A-CEF34F356052.html) that paths should not be constructed by clients.  > Although URLs have a well-known syntax and a well-understood interpretation, a client should treat each href as an opaque string. The rules that govern how the server constructs href strings might change in future releases.  By documenting the endpoints, it also [suggests](https://code.vmware.com/apis/553/vcloud/doc/doc/landing-user_operations.html) that paths can be constructed by clients.  In writing this OpenAPI specification, I\'m making the assumption that the paths will remain predictable. 
 *
 * The version of the OpenAPI document: development
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface ConfigurationParameters {
    apiKey?: string | ((name: string) => string);
    username?: string;
    password?: string;
    accessToken?: string | ((name?: string, scopes?: string[]) => string);
    basePath?: string;
    baseOptions?: any;
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | ((name: string) => string);
    /**
     * parameter for basic security
     * 
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     * 
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | ((name?: string, scopes?: string[]) => string);
    /**
     * override base path
     * 
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
    }
}
