// tslint:disable
/**
 * vCloud Director
 * # vCloud Director Rest API 32.0  ## Suitability for an OpenAPI specification  OpenAPI works with HTTP APIs where the paths of the endpoints follow a predictable pattern.  The vCloud Director Rest API makes extensive use of links. Each link has a URL inside it. By following the correct series of links, a client can arrive at the endpoint it is interested in. This hyperlink style of API is incompatible with OpenAPI.  As well as using hyperlinks, the API does use predictable paths. I read the documentation as being contradictory to if this predictability should be relied upon.  The vCloud Director Rest API documentation [suggests](https://pubs.vmware.com/vcd-56/index.jsp?topic=%2Fcom.vmware.vcloud.api.doc_56%2FGUID-E51FECF4-79D4-497F-A31A-CEF34F356052.html) that paths should not be constructed by clients.  > Although URLs have a well-known syntax and a well-understood interpretation, a client should treat each href as an opaque string. The rules that govern how the server constructs href strings might change in future releases.  By documenting the endpoints, it also [suggests](https://code.vmware.com/apis/553/vcloud/doc/doc/landing-user_operations.html) that paths can be constructed by clients.  In writing this OpenAPI specification, I\'m making the assumption that the paths will remain predictable. 
 *
 * The version of the OpenAPI document: development
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthorizedLocationType
 */
export interface AuthorizedLocationType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof AuthorizedLocationType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof AuthorizedLocationType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    type: string | null;
    /**
     * The entity identifier, expressed in URN format. The value of this attribute uniquely identifies the entity, persists for the life of the entity, and is never reused.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    id: string;
    /**
     * Optional unique identifier to support idempotent semantics for create and delete operations.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    operationKey: string | null;
    /**
     * Optional description.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    description: string | null;
    /**
     * 
     * @type {TasksInProgressType}
     * @memberof AuthorizedLocationType
     */
    tasks: TasksInProgressType;
    /**
     * The name of the entity.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    name: string;
    /**
     * The id of the location. format: orgId@siteId
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    locationId: string;
    /**
     * The name of the location.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    locationName: string | null;
    /**
     * The name of the site.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    siteName: string | null;
    /**
     * The name of the organization.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    orgName: string | null;
    /**
     * The vCloud API endpoint (RestApiBaseUri) for the location.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    restApiEndpoint: string;
    /**
     * The vCloud Director Web Console (SystemExternalHttpAddress) endpoint for the location.
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    uiEndpoint: string;
    /**
     * True if the location accepts multisite x-vcloud-authorization token for this user.
     * @type {boolean}
     * @memberof AuthorizedLocationType
     */
    useMultisiteToken: boolean | null;
    /**
     * The auth context for this org
     * @type {string}
     * @memberof AuthorizedLocationType
     */
    authContext: string | null;
}
/**
 * Represents a vCloud Director server group that this session is authorized to access.
 * @export
 * @interface AuthorizedLocationTypeAllOf
 */
export interface AuthorizedLocationTypeAllOf {
    /**
     * The id of the location. format: orgId@siteId
     * @type {string}
     * @memberof AuthorizedLocationTypeAllOf
     */
    locationId: string;
    /**
     * The name of the location.
     * @type {string}
     * @memberof AuthorizedLocationTypeAllOf
     */
    locationName: string | null;
    /**
     * The name of the site.
     * @type {string}
     * @memberof AuthorizedLocationTypeAllOf
     */
    siteName: string | null;
    /**
     * The name of the organization.
     * @type {string}
     * @memberof AuthorizedLocationTypeAllOf
     */
    orgName: string | null;
    /**
     * The vCloud API endpoint (RestApiBaseUri) for the location.
     * @type {string}
     * @memberof AuthorizedLocationTypeAllOf
     */
    restApiEndpoint: string;
    /**
     * The vCloud Director Web Console (SystemExternalHttpAddress) endpoint for the location.
     * @type {string}
     * @memberof AuthorizedLocationTypeAllOf
     */
    uiEndpoint: string;
    /**
     * True if the location accepts multisite x-vcloud-authorization token for this user.
     * @type {boolean}
     * @memberof AuthorizedLocationTypeAllOf
     */
    useMultisiteToken: boolean | null;
    /**
     * The auth context for this org
     * @type {string}
     * @memberof AuthorizedLocationTypeAllOf
     */
    authContext: string | null;
}
/**
 * Container for AuthorizedLocationType
 * @export
 * @interface AuthorizedLocationsType
 */
export interface AuthorizedLocationsType {
    /**
     * Authorized location for the user in this session.
     * @type {Array<AuthorizedLocationType>}
     * @memberof AuthorizedLocationsType
     */
    location: Array<AuthorizedLocationType>;
}
/**
 * 
 * @export
 * @interface EntityType
 */
export interface EntityType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof EntityType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof EntityType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof EntityType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof EntityType
     */
    type: string | null;
    /**
     * The entity identifier, expressed in URN format. The value of this attribute uniquely identifies the entity, persists for the life of the entity, and is never reused.
     * @type {string}
     * @memberof EntityType
     */
    id: string;
    /**
     * Optional unique identifier to support idempotent semantics for create and delete operations.
     * @type {string}
     * @memberof EntityType
     */
    operationKey: string | null;
    /**
     * Optional description.
     * @type {string}
     * @memberof EntityType
     */
    description: string | null;
    /**
     * 
     * @type {TasksInProgressType}
     * @memberof EntityType
     */
    tasks: TasksInProgressType;
    /**
     * The name of the entity.
     * @type {string}
     * @memberof EntityType
     */
    name: string;
}
/**
 * Basic entity type in the vCloud object model. Includes a name, an optional description, and an optional list of links.
 * @export
 * @interface EntityTypeAllOf
 */
export interface EntityTypeAllOf {
    /**
     * Optional description.
     * @type {string}
     * @memberof EntityTypeAllOf
     */
    description: string | null;
    /**
     * 
     * @type {TasksInProgressType}
     * @memberof EntityTypeAllOf
     */
    tasks: TasksInProgressType;
    /**
     * The name of the entity.
     * @type {string}
     * @memberof EntityTypeAllOf
     */
    name: string;
}
/**
 * 
 * @export
 * @interface IdentifiableResourceType
 */
export interface IdentifiableResourceType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof IdentifiableResourceType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof IdentifiableResourceType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof IdentifiableResourceType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof IdentifiableResourceType
     */
    type: string | null;
    /**
     * The entity identifier, expressed in URN format. The value of this attribute uniquely identifies the entity, persists for the life of the entity, and is never reused.
     * @type {string}
     * @memberof IdentifiableResourceType
     */
    id: string;
    /**
     * Optional unique identifier to support idempotent semantics for create and delete operations.
     * @type {string}
     * @memberof IdentifiableResourceType
     */
    operationKey: string | null;
}
/**
 * The base type for all resource types which contain an id attribute.
 * @export
 * @interface IdentifiableResourceTypeAllOf
 */
export interface IdentifiableResourceTypeAllOf {
    /**
     * The entity identifier, expressed in URN format. The value of this attribute uniquely identifies the entity, persists for the life of the entity, and is never reused.
     * @type {string}
     * @memberof IdentifiableResourceTypeAllOf
     */
    id: string;
    /**
     * Optional unique identifier to support idempotent semantics for create and delete operations.
     * @type {string}
     * @memberof IdentifiableResourceTypeAllOf
     */
    operationKey: string | null;
}
/**
 * Extends reference type by adding relation attribute. Defines a hyper-link with a relationship, hyper-link reference, and an optional MIME type.
 * @export
 * @interface LinkType
 */
export interface LinkType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof LinkType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof LinkType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof LinkType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof LinkType
     */
    type: string | null;
    /**
     * Contains the name of the the entity.
     * @type {string}
     * @memberof LinkType
     */
    name: string | null;
    /**
     * Defines the relationship of the link to the object that contains it. A relationship can be the name of an operation on the object, a reference to a contained or containing object, or a reference to an alternate representation of the object. The relationship value implies the HTTP verb to use when you use the link\'s href as a request URL. See the vCloud API Programming Guide for a list of links and link relations.
     * @type {string}
     * @memberof LinkType
     */
    rel: string;
}
/**
 * 
 * @export
 * @interface LinkTypeAllOf
 */
export interface LinkTypeAllOf {
    /**
     * Defines the relationship of the link to the object that contains it. A relationship can be the name of an operation on the object, a reference to a contained or containing object, or a reference to an alternate representation of the object. The relationship value implies the HTTP verb to use when you use the link\'s href as a request URL. See the vCloud API Programming Guide for a list of links and link relations.
     * @type {string}
     * @memberof LinkTypeAllOf
     */
    rel: string;
}
/**
 * Mapping of a content media type to a xsd complex type.
 * @export
 * @interface MediaTypeMappingType
 */
export interface MediaTypeMappingType {
    /**
     * Content media type.
     * @type {string}
     * @memberof MediaTypeMappingType
     */
    mediaType: string;
    /**
     * Complex type mapping.
     * @type {string}
     * @memberof MediaTypeMappingType
     */
    complexTypeName: string;
    /**
     * Location of the schema file describing the complex type.
     * @type {string}
     * @memberof MediaTypeMappingType
     */
    schemaLocation: string;
}
/**
 * Represents a list of organizations.
 * @export
 * @interface OrgListType
 */
export interface OrgListType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof OrgListType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof OrgListType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof OrgListType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof OrgListType
     */
    type: string | null;
    /**
     * Reference to an organization.
     * @type {Array<ReferenceType>}
     * @memberof OrgListType
     */
    org: Array<ReferenceType>;
}
/**
 * 
 * @export
 * @interface OrgListTypeAllOf
 */
export interface OrgListTypeAllOf {
    /**
     * Reference to an organization.
     * @type {Array<ReferenceType>}
     * @memberof OrgListTypeAllOf
     */
    org: Array<ReferenceType>;
}
/**
 * Represents the user view of a vCloud Director organization.
 * @export
 * @interface OrgType
 */
export interface OrgType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof OrgType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof OrgType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof OrgType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof OrgType
     */
    type: string | null;
    /**
     * The entity identifier, expressed in URN format. The value of this attribute uniquely identifies the entity, persists for the life of the entity, and is never reused.
     * @type {string}
     * @memberof OrgType
     */
    id: string;
    /**
     * Optional unique identifier to support idempotent semantics for create and delete operations.
     * @type {string}
     * @memberof OrgType
     */
    operationKey: string | null;
    /**
     * Optional description.
     * @type {string}
     * @memberof OrgType
     */
    description: string | null;
    /**
     * 
     * @type {TasksInProgressType}
     * @memberof OrgType
     */
    tasks: TasksInProgressType;
    /**
     * The name of the entity.
     * @type {string}
     * @memberof OrgType
     */
    name: string;
    /**
     * Full name of the organization.
     * @type {string}
     * @memberof OrgType
     */
    fullName: string;
    /**
     * True if this organization is enabled (allows login and all other operations). Read-only in the user view. Modifiable in the admin view (AdminOrg element).
     * @type {boolean}
     * @memberof OrgType
     */
    isEnabled: boolean | null;
}
/**
 * 
 * @export
 * @interface OrgTypeAllOf
 */
export interface OrgTypeAllOf {
    /**
     * Full name of the organization.
     * @type {string}
     * @memberof OrgTypeAllOf
     */
    fullName: string;
    /**
     * True if this organization is enabled (allows login and all other operations). Read-only in the user view. Modifiable in the admin view (AdminOrg element).
     * @type {boolean}
     * @memberof OrgTypeAllOf
     */
    isEnabled: boolean | null;
}
/**
 * The base type for all objects in the vCloud model. Has an optional list of links and href and type attributes.
 * @export
 * @interface ReferenceType
 */
export interface ReferenceType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof ReferenceType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof ReferenceType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof ReferenceType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof ReferenceType
     */
    type: string | null;
    /**
     * Contains the name of the the entity.
     * @type {string}
     * @memberof ReferenceType
     */
    name: string | null;
}
/**
 * 
 * @export
 * @interface ReferenceTypeAllOf
 */
export interface ReferenceTypeAllOf {
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof ReferenceTypeAllOf
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof ReferenceTypeAllOf
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof ReferenceTypeAllOf
     */
    type: string | null;
    /**
     * Contains the name of the the entity.
     * @type {string}
     * @memberof ReferenceTypeAllOf
     */
    name: string | null;
}
/**
 * 
 * @export
 * @interface ResourceType
 */
export interface ResourceType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof ResourceType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof ResourceType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof ResourceType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof ResourceType
     */
    type: string | null;
}
/**
 * The base type for all objects in the vCloud model. Has an optional list of links and href and type attributes.
 * @export
 * @interface ResourceTypeAllOf
 */
export interface ResourceTypeAllOf {
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof ResourceTypeAllOf
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof ResourceTypeAllOf
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof ResourceTypeAllOf
     */
    type: string | null;
}
/**
 * 
 * @export
 * @interface SessionType
 */
export interface SessionType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof SessionType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A reference to an entity or operation associated with this object.
     * @type {Array<LinkType>}
     * @memberof SessionType
     */
    link: Array<LinkType>;
    /**
     * The URI of the entity.
     * @type {string}
     * @memberof SessionType
     */
    href: string | null;
    /**
     * The MIME type of the entity.
     * @type {string}
     * @memberof SessionType
     */
    type: string | null;
    /**
     * 
     * @type {AuthorizedLocationsType}
     * @memberof SessionType
     */
    authorizedLocations: AuthorizedLocationsType;
    /**
     * The name of the user that owns the session
     * @type {string}
     * @memberof SessionType
     */
    user: string;
    /**
     * The name of the user\'s organization
     * @type {string}
     * @memberof SessionType
     */
    org: string;
    /**
     * The URN of the user entity
     * @type {string}
     * @memberof SessionType
     */
    userId: string;
    /**
     * Role assigned to this user during this session.
     * @type {string}
     * @memberof SessionType
     */
    roles: string;
    /**
     * Location id of the logged in org
     * @type {string}
     * @memberof SessionType
     */
    locationId: string;
}
/**
 * Represents a vCloud Session.
 * @export
 * @interface SessionTypeAllOf
 */
export interface SessionTypeAllOf {
    /**
     * 
     * @type {AuthorizedLocationsType}
     * @memberof SessionTypeAllOf
     */
    authorizedLocations: AuthorizedLocationsType;
    /**
     * The name of the user that owns the session
     * @type {string}
     * @memberof SessionTypeAllOf
     */
    user: string;
    /**
     * The name of the user\'s organization
     * @type {string}
     * @memberof SessionTypeAllOf
     */
    org: string;
    /**
     * The URN of the user entity
     * @type {string}
     * @memberof SessionTypeAllOf
     */
    userId: string;
    /**
     * Role assigned to this user during this session.
     * @type {string}
     * @memberof SessionTypeAllOf
     */
    roles: string;
    /**
     * Location id of the logged in org
     * @type {string}
     * @memberof SessionTypeAllOf
     */
    locationId: string;
}
/**
 * List all supported versions.
 * @export
 * @interface SupportedVersionsType
 */
export interface SupportedVersionsType {
    /**
     * Information about one version of the API.
     * @type {Array<VersionInfoType>}
     * @memberof SupportedVersionsType
     */
    versionInfo: Array<VersionInfoType>;
}
/**
 * 
 * @export
 * @interface TasksInProgressType
 */
export interface TasksInProgressType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof TasksInProgressType
     */
    vCloudExtension: Array<VCloudExtensionType>;
    /**
     * A task.
     * @type {Array<object>}
     * @memberof TasksInProgressType
     */
    task?: Array<object>;
}
/**
 * A list of queued, running, or recently completed tasks.
 * @export
 * @interface TasksInProgressTypeAllOf
 */
export interface TasksInProgressTypeAllOf {
    /**
     * A task.
     * @type {Array<object>}
     * @memberof TasksInProgressTypeAllOf
     */
    task?: Array<object>;
}
/**
 * A base abstract type for all complex types that support extensions.
 * @export
 * @interface VCloudExtensibleType
 */
export interface VCloudExtensibleType {
    /**
     * An optional extension element that can contain an arbitrary number of elements and attributes. Not related to extension services.
     * @type {Array<VCloudExtensionType>}
     * @memberof VCloudExtensibleType
     */
    vCloudExtension: Array<VCloudExtensionType>;
}
/**
 * 
 * @export
 * @interface VCloudExtensionType
 */
export interface VCloudExtensionType {
    /**
     * True if the request should fail when the server does not understand the extension.
     * @type {boolean}
     * @memberof VCloudExtensionType
     */
    required: boolean | null;
}
/**
 * Information for one version of the API.
 * @export
 * @interface VersionInfoType
 */
export interface VersionInfoType {
    /**
     * Version string.
     * @type {string}
     * @memberof VersionInfoType
     */
    version: string;
    /**
     * Login URL for the version.
     * @type {string}
     * @memberof VersionInfoType
     */
    loginUrl: string;
    /**
     * Media type mapping. This element is not present when the API version is 5.7 or higher.
     * @type {Array<MediaTypeMappingType>}
     * @memberof VersionInfoType
     */
    mediaTypeMapping: Array<MediaTypeMappingType>;
    /**
     * Indicates whether the API version is deprecated for upcoming removal.
     * @type {boolean}
     * @memberof VersionInfoType
     */
    deprecated: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of organizations accessible to you.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrgGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/org`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an organization.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrgIdGet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiOrgIdGet.');
            }
            const localVarPath = `/api/org/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the current session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionDelete(options: any = {}): RequestArgs {
            const localVarPath = `/api/session`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Log in and create a Session object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionsPost(options: any = {}): RequestArgs {
            const localVarPath = `/api/sessions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of vCloud API versions supported by this system. This request does not require an authentication token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/versions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of organizations accessible to you.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrgGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgListType> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiOrgGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve an organization.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrgIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgType> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiOrgIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the current session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionDelete(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiSessionDelete(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Log in and create a Session object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionsPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionType> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiSessionsPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a list of vCloud API versions supported by this system. This request does not require an authentication token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportedVersionsType> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiVersionsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieve a list of organizations accessible to you.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrgGet(options?: any): AxiosPromise<OrgListType> {
            return DefaultApiFp(configuration).apiOrgGet(options)(axios, basePath);
        },
        /**
         * Retrieve an organization.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiOrgIdGet(id: string, options?: any): AxiosPromise<OrgType> {
            return DefaultApiFp(configuration).apiOrgIdGet(id, options)(axios, basePath);
        },
        /**
         * Delete the current session.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionDelete(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).apiSessionDelete(options)(axios, basePath);
        },
        /**
         * Log in and create a Session object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionsPost(options?: any): AxiosPromise<SessionType> {
            return DefaultApiFp(configuration).apiSessionsPost(options)(axios, basePath);
        },
        /**
         * Retrieve a list of vCloud API versions supported by this system. This request does not require an authentication token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVersionsGet(options?: any): AxiosPromise<SupportedVersionsType> {
            return DefaultApiFp(configuration).apiVersionsGet(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieve a list of organizations accessible to you.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiOrgGet(options?: any) {
        return DefaultApiFp(this.configuration).apiOrgGet(options)(this.axios, this.basePath);
    }

    /**
     * Retrieve an organization.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiOrgIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).apiOrgIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * Delete the current session.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiSessionDelete(options?: any) {
        return DefaultApiFp(this.configuration).apiSessionDelete(options)(this.axios, this.basePath);
    }

    /**
     * Log in and create a Session object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiSessionsPost(options?: any) {
        return DefaultApiFp(this.configuration).apiSessionsPost(options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a list of vCloud API versions supported by this system. This request does not require an authentication token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiVersionsGet(options?: any) {
        return DefaultApiFp(this.configuration).apiVersionsGet(options)(this.axios, this.basePath);
    }

}


