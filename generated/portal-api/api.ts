// tslint:disable
/**
 * UKCloud Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: development
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * The ID of the account
     * @type {number}
     * @memberof Account
     */
    id: number;
    /**
     * The name of the account
     * @type {string}
     * @memberof Account
     */
    name: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum BuildState {
    Approved = 'approved',
    Running = 'running',
    Completed = 'completed',
    Failed = 'failed'
}

/**
 * Edge-gateway to build
 * @export
 * @interface EdgeGatewayBuildRequest
 */
export interface EdgeGatewayBuildRequest {
    /**
     * 
     * @type {EdgegatewayBuildRequest}
     * @memberof EdgeGatewayBuildRequest
     */
    data: EdgegatewayBuildRequest;
}
/**
 * Progress of an EdgeGateway-build
 * @export
 * @interface EdgeGatewayBuildResponse
 */
export interface EdgeGatewayBuildResponse {
    /**
     * 
     * @type {EdgegatewayBuildResponse}
     * @memberof EdgeGatewayBuildResponse
     */
    data: EdgegatewayBuildResponse;
}
/**
 * The Edge gateway builds within this account
 * @export
 * @interface EdgeGatewayBuilds
 */
export interface EdgeGatewayBuilds {
    /**
     * 
     * @type {Array<EdgegatewayBuildResponse>}
     * @memberof EdgeGatewayBuilds
     */
    data: Array<EdgegatewayBuildResponse>;
}
/**
 * 
 * @export
 * @interface EdgegatewayBuildRequest
 */
export interface EdgegatewayBuildRequest {
    /**
     * 
     * @type {string}
     * @memberof EdgegatewayBuildRequest
     */
    type: EdgegatewayBuildRequestTypeEnum;
    /**
     * 
     * @type {EdgegatewayBuildRequestAttributes}
     * @memberof EdgegatewayBuildRequest
     */
    attributes: EdgegatewayBuildRequestAttributes;
}

/**
    * @export
    * @enum {string}
    */
export enum EdgegatewayBuildRequestTypeEnum {
    EdgeGateway = 'EdgeGateway'
}

/**
 * 
 * @export
 * @interface EdgegatewayBuildRequestAttributes
 */
export interface EdgegatewayBuildRequestAttributes {
    /**
     * 
     * @type {string}
     * @memberof EdgegatewayBuildRequestAttributes
     */
    connectivityType: EdgegatewayBuildRequestAttributesConnectivityTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EdgegatewayBuildRequestAttributesConnectivityTypeEnum {
    Internet = 'Internet',
    External = 'External'
}

/**
 * 
 * @export
 * @interface EdgegatewayBuildResponse
 */
export interface EdgegatewayBuildResponse {
    /**
     * 
     * @type {string}
     * @memberof EdgegatewayBuildResponse
     */
    type: EdgegatewayBuildResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof EdgegatewayBuildResponse
     */
    id: string;
    /**
     * 
     * @type {EdgegatewayBuildResponseAttributes}
     * @memberof EdgegatewayBuildResponse
     */
    attributes: EdgegatewayBuildResponseAttributes;
}

/**
    * @export
    * @enum {string}
    */
export enum EdgegatewayBuildResponseTypeEnum {
    EdgeGatewayBuild = 'EdgeGateway-build'
}

/**
 * 
 * @export
 * @interface EdgegatewayBuildResponseAttributes
 */
export interface EdgegatewayBuildResponseAttributes {
    /**
     * When the request for the build was received by the Portal.
     * @type {Date}
     * @memberof EdgegatewayBuildResponseAttributes
     */
    createdAt: Date;
    /**
     * The email address of the user to request the build from the Portal.
     * @type {string}
     * @memberof EdgegatewayBuildResponseAttributes
     */
    createdBy: string;
    /**
     * 
     * @type {BuildState}
     * @memberof EdgegatewayBuildResponseAttributes
     */
    state: BuildState;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * User\'s email address
     * @type {string}
     * @memberof InlineObject
     */
    email: string;
    /**
     * User\'s password
     * @type {string}
     * @memberof InlineObject
     */
    password: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<VOrgs>}
     * @memberof InlineResponse200
     */
    data: Array<VOrgs>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<VDCs>}
     * @memberof InlineResponse2001
     */
    data: Array<VDCs>;
}
/**
 * 
 * @export
 * @interface InlineResponse200Attributes
 */
export interface InlineResponse200Attributes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Attributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * Amount of time (in seconds) that the session is valid for
     * @type {number}
     * @memberof InlineResponse201
     */
    expireAfter: number;
}
/**
 * 
 * @export
 * @interface VCloudCredentials
 */
export interface VCloudCredentials {
    /**
     * 
     * @type {string}
     * @memberof VCloudCredentials
     */
    serviceId: string;
    /**
     * 
     * @type {string}
     * @memberof VCloudCredentials
     */
    username: string;
}
/**
 * Progress of a VDC-build
 * @export
 * @interface VDCBuild
 */
export interface VDCBuild {
    /**
     * 
     * @type {VdcBuildResponse}
     * @memberof VDCBuild
     */
    data: VdcBuildResponse;
}
/**
 * The VDC builds within this account
 * @export
 * @interface VDCBuilds
 */
export interface VDCBuilds {
    /**
     * 
     * @type {Array<VdcBuildResponse>}
     * @memberof VDCBuilds
     */
    data: Array<VdcBuildResponse>;
}
/**
 * 
 * @export
 * @interface VDCs
 */
export interface VDCs {
    /**
     * 
     * @type {string}
     * @memberof VDCs
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof VDCs
     */
    type: VDCsTypeEnum;
    /**
     * 
     * @type {InlineResponse200Attributes}
     * @memberof VDCs
     */
    attributes: InlineResponse200Attributes;
}

/**
    * @export
    * @enum {string}
    */
export enum VDCsTypeEnum {
    VDC = 'VDC'
}

/**
 * vOrg to build
 * @export
 * @interface VOrgBuild
 */
export interface VOrgBuild {
    /**
     * 
     * @type {VorgBuildRequest}
     * @memberof VOrgBuild
     */
    data: VorgBuildRequest;
}
/**
 * Progress of a Vorg-build
 * @export
 * @interface VOrgBuild1
 */
export interface VOrgBuild1 {
    /**
     * 
     * @type {VorgBuildResponse}
     * @memberof VOrgBuild1
     */
    data: VorgBuildResponse;
}
/**
 * The vOrg builds within this account
 * @export
 * @interface VOrgBuilds
 */
export interface VOrgBuilds {
    /**
     * 
     * @type {Array<VorgBuildResponse>}
     * @memberof VOrgBuilds
     */
    data: Array<VorgBuildResponse>;
}
/**
 * 
 * @export
 * @interface VOrgs
 */
export interface VOrgs {
    /**
     * 
     * @type {string}
     * @memberof VOrgs
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof VOrgs
     */
    type: VOrgsTypeEnum;
    /**
     * 
     * @type {InlineResponse200Attributes}
     * @memberof VOrgs
     */
    attributes: InlineResponse200Attributes;
}

/**
    * @export
    * @enum {string}
    */
export enum VOrgsTypeEnum {
    VOrg = 'vOrg'
}

/**
 * VDC to build
 * @export
 * @interface VdcBuildRequest
 */
export interface VdcBuildRequest {
    /**
     * 
     * @type {VdcBuildRequestData}
     * @memberof VdcBuildRequest
     */
    data: VdcBuildRequestData;
}
/**
 * 
 * @export
 * @interface VdcBuildRequestData
 */
export interface VdcBuildRequestData {
    /**
     * 
     * @type {string}
     * @memberof VdcBuildRequestData
     */
    type: VdcBuildRequestDataTypeEnum;
    /**
     * 
     * @type {VdcBuildRequestDataAttributes}
     * @memberof VdcBuildRequestData
     */
    attributes: VdcBuildRequestDataAttributes;
}

/**
    * @export
    * @enum {string}
    */
export enum VdcBuildRequestDataTypeEnum {
    VDC = 'VDC'
}

/**
 * 
 * @export
 * @interface VdcBuildRequestDataAttributes
 */
export interface VdcBuildRequestDataAttributes {
    /**
     * 
     * @type {VdcBuildVmType}
     * @memberof VdcBuildRequestDataAttributes
     */
    vmType: VdcBuildVmType;
    /**
     * The name of the VDC
     * @type {string}
     * @memberof VdcBuildRequestDataAttributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface VdcBuildResponse
 */
export interface VdcBuildResponse {
    /**
     * 
     * @type {string}
     * @memberof VdcBuildResponse
     */
    type: VdcBuildResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof VdcBuildResponse
     */
    id: string;
    /**
     * 
     * @type {VdcBuildResponseAttributes}
     * @memberof VdcBuildResponse
     */
    attributes: VdcBuildResponseAttributes;
}

/**
    * @export
    * @enum {string}
    */
export enum VdcBuildResponseTypeEnum {
    VDCBuild = 'VDC-build'
}

/**
 * 
 * @export
 * @interface VdcBuildResponseAttributes
 */
export interface VdcBuildResponseAttributes {
    /**
     * When the request for the build was received by the Portal.
     * @type {Date}
     * @memberof VdcBuildResponseAttributes
     */
    createdAt: Date;
    /**
     * The email address of the user to request the build from the Portal.
     * @type {string}
     * @memberof VdcBuildResponseAttributes
     */
    createdBy: string;
    /**
     * 
     * @type {BuildState}
     * @memberof VdcBuildResponseAttributes
     */
    state: BuildState;
    /**
     * The name of the VDC
     * @type {string}
     * @memberof VdcBuildResponseAttributes
     */
    vdcName: string;
    /**
     * 
     * @type {VdcBuildVmType}
     * @memberof VdcBuildResponseAttributes
     */
    vmType: VdcBuildVmType;
    /**
     * 
     * @type {string}
     * @memberof VdcBuildResponseAttributes
     */
    serviceName: string | null;
}
/**
 * The type of VM workloads used in the VDC
 * @export
 * @enum {string}
 */
export enum VdcBuildVmType {
    ESSENTIAL = 'ESSENTIAL',
    POWER = 'POWER',
    PRIORITY = 'PRIORITY'
}

/**
 * 
 * @export
 * @interface VorgBuildRequest
 */
export interface VorgBuildRequest {
    /**
     * 
     * @type {string}
     * @memberof VorgBuildRequest
     */
    type: VorgBuildRequestTypeEnum;
    /**
     * 
     * @type {VorgBuildRequestAttributes}
     * @memberof VorgBuildRequest
     */
    attributes: VorgBuildRequestAttributes;
}

/**
    * @export
    * @enum {string}
    */
export enum VorgBuildRequestTypeEnum {
    Vorg = 'Vorg'
}

/**
 * 
 * @export
 * @interface VorgBuildRequestAttributes
 */
export interface VorgBuildRequestAttributes {
    /**
     * The name of the vOrg
     * @type {string}
     * @memberof VorgBuildRequestAttributes
     */
    name?: string;
    /**
     * The zone of the vOrg
     * @type {string}
     * @memberof VorgBuildRequestAttributes
     */
    zoneId: string;
}
/**
 * 
 * @export
 * @interface VorgBuildResponse
 */
export interface VorgBuildResponse {
    /**
     * 
     * @type {string}
     * @memberof VorgBuildResponse
     */
    type: VorgBuildResponseTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof VorgBuildResponse
     */
    id: string;
    /**
     * 
     * @type {VorgBuildResponseAttributes}
     * @memberof VorgBuildResponse
     */
    attributes: VorgBuildResponseAttributes;
}

/**
    * @export
    * @enum {string}
    */
export enum VorgBuildResponseTypeEnum {
    VorgBuild = 'Vorg-build'
}

/**
 * 
 * @export
 * @interface VorgBuildResponseAttributes
 */
export interface VorgBuildResponseAttributes {
    /**
     * When the request for the build was received by the Portal.
     * @type {Date}
     * @memberof VorgBuildResponseAttributes
     */
    createdAt: Date;
    /**
     * The email address of the user to request the build from the Portal.
     * @type {string}
     * @memberof VorgBuildResponseAttributes
     */
    createdBy: string;
    /**
     * 
     * @type {BuildState}
     * @memberof VorgBuildResponseAttributes
     */
    state: BuildState;
    /**
     * The name of the vOrg
     * @type {string}
     * @memberof VorgBuildResponseAttributes
     */
    serviceName: string;
    /**
     * The zone of the vOrg
     * @type {string}
     * @memberof VorgBuildResponseAttributes
     */
    zoneId: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of vCloud API credentials associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdApiCredentialsGet(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdApiCredentialsGet.');
            }
            const localVarPath = `/api/accounts/{account_id}/api_credentials`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about all self-service edge gateway builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdEdgeGatewayBuildsGet(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdEdgeGatewayBuildsGet.');
            }
            const localVarPath = `/api/accounts/{account_id}/edge-gateway-builds`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about all self-service VDC builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVdcBuildsGet(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdVdcBuildsGet.');
            }
            const localVarPath = `/api/accounts/{account_id}/vdc-builds`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about all self-service vOrg builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgBuildsGet(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdVorgBuildsGet.');
            }
            const localVarPath = `/api/accounts/{account_id}/vorg-builds`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of basic information about VMware compute services (vOrgs) associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsGet(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdVorgsGet.');
            }
            const localVarPath = `/api/accounts/{account_id}/vorgs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a vOrg in the specified account in the specified zone. The authenticated user who creates the vOrg is automatically granted full administrative control of the compute service, enabling creation of VDCs and edge gateways immediately via the Portal API.
         * @summary Creates a vOrg in the specified account in the specified zone
         * @param {number} accountId The ID of your account
         * @param {VOrgBuild} vOrgBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsPost(accountId: number, vOrgBuild: VOrgBuild, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdVorgsPost.');
            }
            // verify required parameter 'vOrgBuild' is not null or undefined
            if (vOrgBuild === null || vOrgBuild === undefined) {
                throw new RequiredError('vOrgBuild','Required parameter vOrgBuild was null or undefined when calling apiAccountsAccountIdVorgsPost.');
            }
            const localVarPath = `/api/accounts/{account_id}/vorgs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof vOrgBuild !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(vOrgBuild !== undefined ? vOrgBuild : {}) : (vOrgBuild || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdVorgsVorgIdVdcsGet.');
            }
            // verify required parameter 'vorgId' is not null or undefined
            if (vorgId === null || vorgId === undefined) {
                throw new RequiredError('vorgId','Required parameter vorgId was null or undefined when calling apiAccountsAccountIdVorgsVorgIdVdcsGet.');
            }
            const localVarPath = `/api/accounts/{account_id}/vorgs/{vorg_id}/vdcs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"vorg_id"}}`, encodeURIComponent(String(vorgId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of accounts associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary An endpoint to test API functionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about the progress of a specific vOrg build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVorgBuildsBuildIdGet(buildId: number, options: any = {}): RequestArgs {
            // verify required parameter 'buildId' is not null or undefined
            if (buildId === null || buildId === undefined) {
                throw new RequiredError('buildId','Required parameter buildId was null or undefined when calling apiVorgBuildsBuildIdGet.');
            }
            const localVarPath = `/api/vorg-builds/{build_id}`
                .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authenticates your API session
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(inlineObject: InlineObject, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject' is not null or undefined
            if (inlineObject === null || inlineObject === undefined) {
                throw new RequiredError('inlineObject','Required parameter inlineObject was null or undefined when calling authenticate.');
            }
            const localVarPath = `/api/authenticate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates an edge gateway in the specified account under the specified organisation and VDC
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {string} vdcUrn The full URN of the VDC in which you want to create the edge gateway, including the urn:vcloud:vdc: prefix
         * @param {EdgeGatewayBuildRequest} edgeGatewayBuildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEdgeGateway(accountId: number, vorgId: number, vdcUrn: string, edgeGatewayBuildRequest: EdgeGatewayBuildRequest, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling createEdgeGateway.');
            }
            // verify required parameter 'vorgId' is not null or undefined
            if (vorgId === null || vorgId === undefined) {
                throw new RequiredError('vorgId','Required parameter vorgId was null or undefined when calling createEdgeGateway.');
            }
            // verify required parameter 'vdcUrn' is not null or undefined
            if (vdcUrn === null || vdcUrn === undefined) {
                throw new RequiredError('vdcUrn','Required parameter vdcUrn was null or undefined when calling createEdgeGateway.');
            }
            // verify required parameter 'edgeGatewayBuildRequest' is not null or undefined
            if (edgeGatewayBuildRequest === null || edgeGatewayBuildRequest === undefined) {
                throw new RequiredError('edgeGatewayBuildRequest','Required parameter edgeGatewayBuildRequest was null or undefined when calling createEdgeGateway.');
            }
            const localVarPath = `/api/accounts/{account_id}/vorgs/{vorg_id}/vdcs/{vdc_urn}/edge-gateways`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"vorg_id"}}`, encodeURIComponent(String(vorgId)))
                .replace(`{${"vdc_urn"}}`, encodeURIComponent(String(vdcUrn)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof edgeGatewayBuildRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(edgeGatewayBuildRequest !== undefined ? edgeGatewayBuildRequest : {}) : (edgeGatewayBuildRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a VDC in the specified account under the specified compute service (vOrg)
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {VdcBuildRequest} vdcBuildRequest VDC details to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVdc(accountId: number, vorgId: number, vdcBuildRequest: VdcBuildRequest, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling createVdc.');
            }
            // verify required parameter 'vorgId' is not null or undefined
            if (vorgId === null || vorgId === undefined) {
                throw new RequiredError('vorgId','Required parameter vorgId was null or undefined when calling createVdc.');
            }
            // verify required parameter 'vdcBuildRequest' is not null or undefined
            if (vdcBuildRequest === null || vdcBuildRequest === undefined) {
                throw new RequiredError('vdcBuildRequest','Required parameter vdcBuildRequest was null or undefined when calling createVdc.');
            }
            const localVarPath = `/api/accounts/{account_id}/vorgs/{vorg_id}/vdcs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"vorg_id"}}`, encodeURIComponent(String(vorgId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof vdcBuildRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(vdcBuildRequest !== undefined ? vdcBuildRequest : {}) : (vdcBuildRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Provides information about the progress of a specific edge gateway build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        edgeGatewayBuild(buildId: number, options: any = {}): RequestArgs {
            // verify required parameter 'buildId' is not null or undefined
            if (buildId === null || buildId === undefined) {
                throw new RequiredError('buildId','Required parameter buildId was null or undefined when calling edgeGatewayBuild.');
            }
            const localVarPath = `/api/edge-gateway-builds/{build_id}`
                .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns information about the progress of a specific VDC build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vdcBuild(buildId: number, options: any = {}): RequestArgs {
            // verify required parameter 'buildId' is not null or undefined
            if (buildId === null || buildId === undefined) {
                throw new RequiredError('buildId','Required parameter buildId was null or undefined when calling vdcBuild.');
            }
            const localVarPath = `/api/vdc-builds/{build_id}`
                .replace(`{${"build_id"}}`, encodeURIComponent(String(buildId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of vCloud API credentials associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdApiCredentialsGet(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: VCloudCredentials; }> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdApiCredentialsGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns information about all self-service edge gateway builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdEdgeGatewayBuildsGet(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EdgeGatewayBuilds> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdEdgeGatewayBuildsGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns information about all self-service VDC builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVdcBuildsGet(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VDCBuilds> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdVdcBuildsGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns information about all self-service vOrg builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgBuildsGet(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOrgBuilds> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdVorgBuildsGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns a list of basic information about VMware compute services (vOrgs) associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsGet(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdVorgsGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a vOrg in the specified account in the specified zone. The authenticated user who creates the vOrg is automatically granted full administrative control of the compute service, enabling creation of VDCs and edge gateways immediately via the Portal API.
         * @summary Creates a vOrg in the specified account in the specified zone
         * @param {number} accountId The ID of your account
         * @param {VOrgBuild} vOrgBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsPost(accountId: number, vOrgBuild: VOrgBuild, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOrgBuild1> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdVorgsPost(accountId, vOrgBuild, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId, vorgId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns a list of accounts associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary An endpoint to test API functionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPingGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns information about the progress of a specific vOrg build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVorgBuildsBuildIdGet(buildId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VOrgBuild1> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiVorgBuildsBuildIdGet(buildId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Authenticates your API session
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).authenticate(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates an edge gateway in the specified account under the specified organisation and VDC
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {string} vdcUrn The full URN of the VDC in which you want to create the edge gateway, including the urn:vcloud:vdc: prefix
         * @param {EdgeGatewayBuildRequest} edgeGatewayBuildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEdgeGateway(accountId: number, vorgId: number, vdcUrn: string, edgeGatewayBuildRequest: EdgeGatewayBuildRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EdgeGatewayBuildResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createEdgeGateway(accountId, vorgId, vdcUrn, edgeGatewayBuildRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Creates a VDC in the specified account under the specified compute service (vOrg)
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {VdcBuildRequest} vdcBuildRequest VDC details to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVdc(accountId: number, vorgId: number, vdcBuildRequest: VdcBuildRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VDCBuild> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createVdc(accountId, vorgId, vdcBuildRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Provides information about the progress of a specific edge gateway build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        edgeGatewayBuild(buildId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EdgeGatewayBuildResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).edgeGatewayBuild(buildId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns information about the progress of a specific VDC build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vdcBuild(buildId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VDCBuild> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).vdcBuild(buildId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns a list of vCloud API credentials associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdApiCredentialsGet(accountId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdApiCredentialsGet(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns information about all self-service edge gateway builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdEdgeGatewayBuildsGet(accountId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdEdgeGatewayBuildsGet(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns information about all self-service VDC builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVdcBuildsGet(accountId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdVdcBuildsGet(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns information about all self-service vOrg builds for an account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgBuildsGet(accountId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdVorgBuildsGet(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns a list of basic information about VMware compute services (vOrgs) associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsGet(accountId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdVorgsGet(accountId, options)(axios, basePath);
        },
        /**
         * Creates a vOrg in the specified account in the specified zone. The authenticated user who creates the vOrg is automatically granted full administrative control of the compute service, enabling creation of VDCs and edge gateways immediately via the Portal API.
         * @summary Creates a vOrg in the specified account in the specified zone
         * @param {number} accountId The ID of your account
         * @param {VOrgBuild} vOrgBuild 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsPost(accountId: number, vOrgBuild: VOrgBuild, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdVorgsPost(accountId, vOrgBuild, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId, vorgId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns a list of accounts associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(options?: any) {
            return DefaultApiFp(configuration).apiAccountsGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary An endpoint to test API functionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet(options?: any) {
            return DefaultApiFp(configuration).apiPingGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns information about the progress of a specific vOrg build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiVorgBuildsBuildIdGet(buildId: number, options?: any) {
            return DefaultApiFp(configuration).apiVorgBuildsBuildIdGet(buildId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Authenticates your API session
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticate(inlineObject: InlineObject, options?: any) {
            return DefaultApiFp(configuration).authenticate(inlineObject, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates an edge gateway in the specified account under the specified organisation and VDC
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {string} vdcUrn The full URN of the VDC in which you want to create the edge gateway, including the urn:vcloud:vdc: prefix
         * @param {EdgeGatewayBuildRequest} edgeGatewayBuildRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEdgeGateway(accountId: number, vorgId: number, vdcUrn: string, edgeGatewayBuildRequest: EdgeGatewayBuildRequest, options?: any) {
            return DefaultApiFp(configuration).createEdgeGateway(accountId, vorgId, vdcUrn, edgeGatewayBuildRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Creates a VDC in the specified account under the specified compute service (vOrg)
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg
         * @param {VdcBuildRequest} vdcBuildRequest VDC details to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVdc(accountId: number, vorgId: number, vdcBuildRequest: VdcBuildRequest, options?: any) {
            return DefaultApiFp(configuration).createVdc(accountId, vorgId, vdcBuildRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary Provides information about the progress of a specific edge gateway build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        edgeGatewayBuild(buildId: number, options?: any) {
            return DefaultApiFp(configuration).edgeGatewayBuild(buildId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns information about the progress of a specific VDC build
         * @param {number} buildId The unique ID of the build
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vdcBuild(buildId: number, options?: any) {
            return DefaultApiFp(configuration).vdcBuild(buildId, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Returns a list of vCloud API credentials associated with the specified account
     * @param {number} accountId The ID of your account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdApiCredentialsGet(accountId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdApiCredentialsGet(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns information about all self-service edge gateway builds for an account
     * @param {number} accountId The ID of your account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdEdgeGatewayBuildsGet(accountId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdEdgeGatewayBuildsGet(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns information about all self-service VDC builds for an account
     * @param {number} accountId The ID of your account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdVdcBuildsGet(accountId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdVdcBuildsGet(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns information about all self-service vOrg builds for an account
     * @param {number} accountId The ID of your account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdVorgBuildsGet(accountId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdVorgBuildsGet(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of basic information about VMware compute services (vOrgs) associated with the specified account
     * @param {number} accountId The ID of your account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdVorgsGet(accountId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdVorgsGet(accountId, options)(this.axios, this.basePath);
    }

    /**
     * Creates a vOrg in the specified account in the specified zone. The authenticated user who creates the vOrg is automatically granted full administrative control of the compute service, enabling creation of VDCs and edge gateways immediately via the Portal API.
     * @summary Creates a vOrg in the specified account in the specified zone
     * @param {number} accountId The ID of your account
     * @param {VOrgBuild} vOrgBuild 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdVorgsPost(accountId: number, vOrgBuild: VOrgBuild, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdVorgsPost(accountId, vOrgBuild, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
     * @param {number} accountId The ID of your account
     * @param {number} vorgId The ID of the vOrg
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId, vorgId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of accounts associated with the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsGet(options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary An endpoint to test API functionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPingGet(options?: any) {
        return DefaultApiFp(this.configuration).apiPingGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns information about the progress of a specific vOrg build
     * @param {number} buildId The unique ID of the build
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiVorgBuildsBuildIdGet(buildId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiVorgBuildsBuildIdGet(buildId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Authenticates your API session
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authenticate(inlineObject: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).authenticate(inlineObject, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates an edge gateway in the specified account under the specified organisation and VDC
     * @param {number} accountId The ID of your account
     * @param {number} vorgId The ID of the vOrg
     * @param {string} vdcUrn The full URN of the VDC in which you want to create the edge gateway, including the urn:vcloud:vdc: prefix
     * @param {EdgeGatewayBuildRequest} edgeGatewayBuildRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEdgeGateway(accountId: number, vorgId: number, vdcUrn: string, edgeGatewayBuildRequest: EdgeGatewayBuildRequest, options?: any) {
        return DefaultApiFp(this.configuration).createEdgeGateway(accountId, vorgId, vdcUrn, edgeGatewayBuildRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Creates a VDC in the specified account under the specified compute service (vOrg)
     * @param {number} accountId The ID of your account
     * @param {number} vorgId The ID of the vOrg
     * @param {VdcBuildRequest} vdcBuildRequest VDC details to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createVdc(accountId: number, vorgId: number, vdcBuildRequest: VdcBuildRequest, options?: any) {
        return DefaultApiFp(this.configuration).createVdc(accountId, vorgId, vdcBuildRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Provides information about the progress of a specific edge gateway build
     * @param {number} buildId The unique ID of the build
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public edgeGatewayBuild(buildId: number, options?: any) {
        return DefaultApiFp(this.configuration).edgeGatewayBuild(buildId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns information about the progress of a specific VDC build
     * @param {number} buildId The unique ID of the build
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public vdcBuild(buildId: number, options?: any) {
        return DefaultApiFp(this.configuration).vdcBuild(buildId, options)(this.axios, this.basePath);
    }

}


