// tslint:disable
/**
 * UKCloud Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: development
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * User\'s email address
     * @type {string}
     * @memberof InlineObject
     */
    email: string;
    /**
     * User\'s password
     * @type {string}
     * @memberof InlineObject
     */
    password: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * The ID of the account
     * @type {number}
     * @memberof InlineResponse200
     */
    id: number;
    /**
     * The name of the account
     * @type {string}
     * @memberof InlineResponse200
     */
    name: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    serviceId: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2001
     */
    username: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<VDCs>}
     * @memberof InlineResponse2002
     */
    data: Array<VDCs>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002Attributes
 */
export interface InlineResponse2002Attributes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Attributes
     */
    name: string;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * Amount of time (in seconds) that the session is valid for
     * @type {number}
     * @memberof InlineResponse201
     */
    expireAfter: number;
}
/**
 * 
 * @export
 * @interface VDCs
 */
export interface VDCs {
    /**
     * 
     * @type {string}
     * @memberof VDCs
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof VDCs
     */
    type: VDCsTypeEnum;
    /**
     * 
     * @type {InlineResponse2002Attributes}
     * @memberof VDCs
     */
    attributes: InlineResponse2002Attributes;
}

/**
    * @export
    * @enum {string}
    */
export enum VDCsTypeEnum {
    VDC = 'VDC'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of vCloud API credentials associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdApiCredentialsGet(accountId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdApiCredentialsGet.');
            }
            const localVarPath = `/api/accounts/:account_id/api_credentials`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sessionCookie required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg in which the VDC resides
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling apiAccountsAccountIdVorgsVorgIdVdcsGet.');
            }
            // verify required parameter 'vorgId' is not null or undefined
            if (vorgId === null || vorgId === undefined) {
                throw new RequiredError('vorgId','Required parameter vorgId was null or undefined when calling apiAccountsAccountIdVorgsVorgIdVdcsGet.');
            }
            const localVarPath = `/api/accounts/:account_id/vorgs/:vorg_id/vdcs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"vorg_id"}}`, encodeURIComponent(String(vorgId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sessionCookie required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of accounts associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/accounts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Authenticates your API session
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticatePost(inlineObject: InlineObject, options: any = {}): RequestArgs {
            // verify required parameter 'inlineObject' is not null or undefined
            if (inlineObject === null || inlineObject === undefined) {
                throw new RequiredError('inlineObject','Required parameter inlineObject was null or undefined when calling apiAuthenticatePost.');
            }
            const localVarPath = `/api/authenticate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof inlineObject !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary An endpoint to test API functionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sessionCookie required


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of vCloud API credentials associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdApiCredentialsGet(accountId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: InlineResponse2001; }> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdApiCredentialsGet(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg in which the VDC resides
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId, vorgId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Returns a list of accounts associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse200>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAccountsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Authenticates your API session
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticatePost(inlineObject: InlineObject, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiAuthenticatePost(inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary An endpoint to test API functionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).apiPingGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Returns a list of vCloud API credentials associated with the specified account
         * @param {number} accountId The ID of your account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdApiCredentialsGet(accountId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdApiCredentialsGet(accountId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
         * @param {number} accountId The ID of your account
         * @param {number} vorgId The ID of the vOrg in which the VDC resides
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options?: any) {
            return DefaultApiFp(configuration).apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId, vorgId, options)(axios, basePath);
        },
        /**
         * 
         * @summary Returns a list of accounts associated with the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountsGet(options?: any) {
            return DefaultApiFp(configuration).apiAccountsGet(options)(axios, basePath);
        },
        /**
         * 
         * @summary Authenticates your API session
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthenticatePost(inlineObject: InlineObject, options?: any) {
            return DefaultApiFp(configuration).apiAuthenticatePost(inlineObject, options)(axios, basePath);
        },
        /**
         * 
         * @summary An endpoint to test API functionality
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPingGet(options?: any) {
            return DefaultApiFp(configuration).apiPingGet(options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Returns a list of vCloud API credentials associated with the specified account
     * @param {number} accountId The ID of your account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdApiCredentialsGet(accountId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdApiCredentialsGet(accountId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
     * @param {number} accountId The ID of your account
     * @param {number} vorgId The ID of the vOrg in which the VDC resides
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId: number, vorgId: number, options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsAccountIdVorgsVorgIdVdcsGet(accountId, vorgId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Returns a list of accounts associated with the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAccountsGet(options?: any) {
        return DefaultApiFp(this.configuration).apiAccountsGet(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Authenticates your API session
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthenticatePost(inlineObject: InlineObject, options?: any) {
        return DefaultApiFp(this.configuration).apiAuthenticatePost(inlineObject, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary An endpoint to test API functionality
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiPingGet(options?: any) {
        return DefaultApiFp(this.configuration).apiPingGet(options)(this.axios, this.basePath);
    }

}


